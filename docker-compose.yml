version: '3.8'

networks:
  sds_network:
    driver: bridge

volumes:
  postgres_data:

services:
  nginx:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - landing
      - dashboard
      - eido_streamlit
      - idx_ui
    networks:
      - sds_network

  landing:
    build:
      context: ./landing
      dockerfile: Dockerfile
    networks:
      - sds_network

  api:
    build:
      context: ./sentinelai
      dockerfile: Dockerfile.api
    command: uvicorn main:app --host 0.0.0.0 --port 5000
    ports:
      - "5000:5000"
    volumes:
      - ./sentinelai:/app
    networks:
      - sds_network
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  eido_db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-eido_db}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sds_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-eido_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  eido_api:
    build:
      context: ./eido-agent
    command: ["api"]
    volumes:
      - ./eido-agent:/app
    ports:
      - "8004:8000"
    depends_on:
      eido_db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@eido_db/${POSTGRES_DB:-eido_db}
      - PORT=8000
      - GOOGLE_API_KEY=AIzaSyAHuryisMCDSBBp0nR5TlQwAMYgSZcILPA
    networks:
      - sds_network
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  eido_streamlit:
    build:
      context: ./eido-agent
    command: ["ui"]
    volumes:
      - ./eido-agent:/app
    ports:
      - "8502:8501"
    depends_on:
      eido_api:
        condition: service_healthy
    environment:
      - API_BASE_URL=http://eido_api:8000
      - PORT=8501
    networks:
      - sds_network
    env_file:
      - .env

  idx_api:
    build:
      context: ./idx-agent
    command: [ "api" ]
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8002
      - DOCKER_ENV=true
    volumes:
      - ./idx-agent/data:/app/data
    ports:
      - "8002:8002"
    networks:
      - sds_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8002/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    env_file:
      - .env

  idx_ui:
    build:
      context: ./idx-agent
    command: ["ui"]
    depends_on:
      idx_api:
        condition: service_healthy
    environment:
      - API_BASE_URL=http://idx_api:8002
      - STREAMLIT_SERVER_PORT=8502
      - DOCKER_ENV=true
    ports:
      - "8503:8502"
    networks:
      - sds_network
    env_file:
      - .env

  dashboard:
    build:
      context: ./sentinelai/dashboard
    ports:
      - "8501:8080"
    volumes:
      - ./sentinelai/dashboard:/app
    depends_on:
      eido_api:
        condition: service_healthy
      idx_api:
        condition: service_healthy
    networks:
      - sds_network
    env_file:
      - .env

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - sds_network
