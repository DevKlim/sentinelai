networks:
  sds_network:
    driver: bridge

volumes:
  postgres_data:

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - sds_network

  landing:
    build:
      context: ./landing
      dockerfile: Dockerfile
    container_name: landing
    restart: unless-stopped
    networks:
      - sds_network

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: dashboard
    restart: unless-stopped
    networks:
      - sds_network
    ports:
      - "8080:8080"

  eido_db:
    image: postgres:15-alpine
    container_name: eido_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-eido_db}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sds_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER:-user} -d $${POSTGRES_DB:-eido_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  python-services:
    build:
      context: .
      dockerfile: Dockerfile.python-services
    container_name: python-services
    restart: unless-stopped
    networks:
      - sds_network
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@eido_db:5432/${POSTGRES_DB:-eido_db}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_MODEL_NAME=${GOOGLE_MODEL_NAME:-gemini-1.5-flash-latest}
      - EIDO_AGENT_URL=http://localhost:8000
      - IDX_AGENT_URL=http://localhost:8001
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      eido_db:
        condition: service_healthy
